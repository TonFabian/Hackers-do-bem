image: python:3.9

services:
  - docker:dind

stages:
  - build
  - lint
  - test
  - scan
  - deploy
  - review

# Estágio de Build
build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - echo "Building Docker image..."
    - docker build -t my-app-image .

# Estágio de Análise Estática de Código (SAST) com Bandit
lint:
  stage: lint
  script:
    - pip install --upgrade pip
    - pip install bandit
    - bandit -r todo_project/todo_project -f html -o bandit-report.html || true
  artifacts:
    paths:
      - bandit-report.html
    expire_in: 1 week

# Estágio de Testes
test:
  stage: test
  script:
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - pytest --maxfail=1 --disable-warnings -q

# Estágio de Scan
scan:
  stage: scan
  image: docker:latest
  services:
    - docker:dind
  script:
    - echo "Running OWASP ZAP scan..."
    - docker-compose -f docker-compose.yml up --abort-on-container-exit || true
    - echo "Listing files in the scan report directory..."
    - ls ./zap_data || true  # Ignora erros ao listar arquivos
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - ./zap_data/scan-report.html
    reports:
      # Ajusta a configuração dos artefatos para evitar falha se não encontrados
      # Exemplo para usar apenas o path do scan-report.html
      paths:
        - ./zap_data/scan-report.html || true
      reports:
        # Defina o relatório que deseja gerar ou ignorar os erros
        html:
          path: ./zap_data/scan-report.html
    # Usa "when: always" para garantir que o job não falhe se os arquivos não forem encontrados

# Estágio de Deploy
deploy:
  stage: deploy
  script:
    - echo "Deploying to production environment..."
    # Adicione seus comandos de deploy específicos aqui, se necessário

# Estágio de Review
review:
  stage: review
  script:
    - echo "Creating review environment..."
    # Adicione seus comandos para criar um ambiente de revisão aqui, se necessário

