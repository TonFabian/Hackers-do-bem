stages:
  - build
  - lint
  - test
  - security
  - review
  - deploy

# Estágio de Build
build:
  stage: build
  script:
    - echo "Starting build process..."
    # Adicione seus comandos de construção específicos aqui, se necessário

# Estágio de Análise Estática de Código (SAST) com Bandit
lint:
  stage: lint
  image: python:3.9
  script:
    - pip install --upgrade pip
    - pip install bandit
    - bandit -r todo_project/todo_project -f html -o bandit-report.html || true
  artifacts:
    paths:
      - bandit-report.html
    expire_in: 1 week

# Estágio de Análise de Dependência com OWASP Dependency-Check
dependency_check:
  stage: security
  script:
    - pip install dependency-check
    - dependency-check --project "My Project" --scan todo_project/todo_project --out dependency-check-report.html
  artifacts:
    paths:
      - dependency-check-report.html
    expire_in: 1 week
  allow_failure: true

# Estágio de Testes
test:
  stage: test
  image: python:3.9
  cache:
    paths:
      - .cache/pip
  before_script:
    - pip install --upgrade pip
    - pip install -r requirements.txt
  script:
    - pytest --maxfail=1 --disable-warnings -q

# Estágio de Revisão
review:
  stage: review
  script:
    - echo "Review environment setup (e.g., deploy to a temporary environment)"
    # Adicione comandos para criar um ambiente temporário para revisão

# Estágio de Deploy em Estágio
deploy:
  stage: deploy
  script:
    - echo "Deploying to staging environment"
    # Adicione comandos para realizar o deploy no ambiente de staging

# Estágio de Testes de Segurança Dinâmicos (DAST) com OWASP ZAP
dast:
  stage: security
  script:
    - wget https://github.com/zaproxy/zaproxy/releases/download/v2.12.0/ZAP_2.12.0_Linux.tar.gz
    - tar -xvzf ZAP_2.12.0_Linux.tar.gz
    - ./zap/zap.sh -daemon -port 8080
    - zap-cli quick-scan -r zap_report.html http://localhost:8080
  artifacts:
    paths:
      - zap_report.html
    expire_in: 1 week
  dependencies:
    - deploy
