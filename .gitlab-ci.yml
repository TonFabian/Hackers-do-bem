image: python:3.9

services:
  - docker:dind

stages:
  - build
  - lint
  - test
  - scan
  - deploy
  - review

# Estágio de Build
build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - echo "Building Docker image..."
    - docker build -t my-app-image .

# Estágio de Análise Estática de Código (SAST) com Bandit
lint:
  stage: lint
  script:
    - pip install --upgrade pip
    - pip install bandit
    - bandit -r todo_project/todo_project -f html -o bandit-report.html || true
  artifacts:
    paths:
      - bandit-report.html
    expire_in: 1 week

# Estágio de Testes
test:
  stage: test
  script:
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - pytest --maxfail=1 --disable-warnings -q

# Estágio de Análise de Segurança Dinâmica com OWASP ZAP
zap-full-scan:
  stage: scan
  image:
    name: zaproxy/zap-stable:2.15.0
    entrypoint: [""]
  variables:
    ZAP_ALERT_REPORT: quick_scan_alert_report
    ZAP_REPORT: quick_scan_report
  script:
    - echo "Running OWASP ZAP scan..."
    - chmod 777 /zap/zap_full_scan.sh  # Garante que o script tenha permissões adequadas
    - bash /zap/zap_full_scan.sh  # Executa o script de scan
    - echo "Listing files in /zap/wrk/..."
    - ls -l /zap/wrk/
    - echo "Displaying content of quick_scan_alert_report.md..."
    - cat /zap/wrk/quick_scan_alert_report.md || echo "quick_scan_alert_report.md not found"
  only:
    refs:
      - branches
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - wrk/quick_scan_report.html
      - wrk/quick_scan_alert_report.md

# Estágio de Deploy
deploy:
  stage: deploy
  script:
    - echo "Deploying to production environment..."
    # Adicione seus comandos de deploy específicos aqui, se necessário

# Estágio de Review
review:
  stage: review
  script:
    - echo "Creating review environment..."
    # Adicione seus comandos para criar um ambiente de revisão aqui, se necessário

